/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace GameGateway {
  export type LeaderboardEntryStruct = {
    winner: AddressLike;
    timeTaken: BigNumberish;
    roomNumber: BigNumberish;
    gameType: BigNumberish;
    timestamp: BigNumberish;
  };

  export type LeaderboardEntryStructOutput = [
    winner: string,
    timeTaken: bigint,
    roomNumber: bigint,
    gameType: bigint,
    timestamp: bigint
  ] & {
    winner: string;
    timeTaken: bigint;
    roomNumber: bigint;
    gameType: bigint;
    timestamp: bigint;
  };

  export type PlayerStruct = {
    playerAddress: AddressLike;
    totalGamesPlayed: BigNumberish;
    totalGamesWon: BigNumberish;
  };

  export type PlayerStructOutput = [
    playerAddress: string,
    totalGamesPlayed: bigint,
    totalGamesWon: bigint
  ] & {
    playerAddress: string;
    totalGamesPlayed: bigint;
    totalGamesWon: bigint;
  };
}

export interface GameGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createGame"
      | "endGame"
      | "games"
      | "getLeaderboardEntry"
      | "getPlayerStats"
      | "hasGameStarted"
      | "joinGame"
      | "leaderboard"
      | "players"
      | "signUpUser"
      | "totalRooms"
      | "userSignUp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameCreated"
      | "GameEnded"
      | "GameJoined"
      | "LeaderboardUpdated"
      | "UserSignedUp"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createGame",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getLeaderboardEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGameStarted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signUpUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRooms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userSignUp",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboardEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signUpUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalRooms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userSignUp", data: BytesLike): Result;
}

export namespace GameCreatedEvent {
  export type InputTuple = [
    roomNumber: BigNumberish,
    creator: AddressLike,
    gameType: BigNumberish
  ];
  export type OutputTuple = [
    roomNumber: bigint,
    creator: string,
    gameType: bigint
  ];
  export interface OutputObject {
    roomNumber: bigint;
    creator: string;
    gameType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [roomNumber: BigNumberish, winner: AddressLike];
  export type OutputTuple = [roomNumber: bigint, winner: string];
  export interface OutputObject {
    roomNumber: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameJoinedEvent {
  export type InputTuple = [roomNumber: BigNumberish, player: AddressLike];
  export type OutputTuple = [roomNumber: bigint, player: string];
  export interface OutputObject {
    roomNumber: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeaderboardUpdatedEvent {
  export type InputTuple = [roomNumber: BigNumberish, winner: AddressLike];
  export type OutputTuple = [roomNumber: bigint, winner: string];
  export interface OutputObject {
    roomNumber: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserSignedUpEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameGateway extends BaseContract {
  connect(runner?: ContractRunner | null): GameGateway;
  waitForDeployment(): Promise<this>;

  interface: GameGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createGame: TypedContractMethod<
    [_instance: AddressLike, gameType: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  endGame: TypedContractMethod<
    [roomNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  games: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getLeaderboardEntry: TypedContractMethod<
    [roomNumber: BigNumberish],
    [GameGateway.LeaderboardEntryStructOutput],
    "view"
  >;

  getPlayerStats: TypedContractMethod<
    [player: AddressLike],
    [GameGateway.PlayerStructOutput],
    "view"
  >;

  hasGameStarted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  joinGame: TypedContractMethod<
    [roomNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  leaderboard: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        winner: string;
        timeTaken: bigint;
        roomNumber: bigint;
        gameType: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  players: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint] & {
        playerAddress: string;
        totalGamesPlayed: bigint;
        totalGamesWon: bigint;
      }
    ],
    "view"
  >;

  signUpUser: TypedContractMethod<[], [void], "nonpayable">;

  totalRooms: TypedContractMethod<[], [bigint], "view">;

  userSignUp: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<
    [_instance: AddressLike, gameType: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endGame"
  ): TypedContractMethod<[roomNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLeaderboardEntry"
  ): TypedContractMethod<
    [roomNumber: BigNumberish],
    [GameGateway.LeaderboardEntryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerStats"
  ): TypedContractMethod<
    [player: AddressLike],
    [GameGateway.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasGameStarted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[roomNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "leaderboard"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        winner: string;
        timeTaken: bigint;
        roomNumber: bigint;
        gameType: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint] & {
        playerAddress: string;
        totalGamesPlayed: bigint;
        totalGamesWon: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "signUpUser"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalRooms"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userSignUp"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameJoined"
  ): TypedContractEvent<
    GameJoinedEvent.InputTuple,
    GameJoinedEvent.OutputTuple,
    GameJoinedEvent.OutputObject
  >;
  getEvent(
    key: "LeaderboardUpdated"
  ): TypedContractEvent<
    LeaderboardUpdatedEvent.InputTuple,
    LeaderboardUpdatedEvent.OutputTuple,
    LeaderboardUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserSignedUp"
  ): TypedContractEvent<
    UserSignedUpEvent.InputTuple,
    UserSignedUpEvent.OutputTuple,
    UserSignedUpEvent.OutputObject
  >;

  filters: {
    "GameCreated(uint256,address,uint8)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameEnded(uint256,address)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameJoined(uint256,address)": TypedContractEvent<
      GameJoinedEvent.InputTuple,
      GameJoinedEvent.OutputTuple,
      GameJoinedEvent.OutputObject
    >;
    GameJoined: TypedContractEvent<
      GameJoinedEvent.InputTuple,
      GameJoinedEvent.OutputTuple,
      GameJoinedEvent.OutputObject
    >;

    "LeaderboardUpdated(uint256,address)": TypedContractEvent<
      LeaderboardUpdatedEvent.InputTuple,
      LeaderboardUpdatedEvent.OutputTuple,
      LeaderboardUpdatedEvent.OutputObject
    >;
    LeaderboardUpdated: TypedContractEvent<
      LeaderboardUpdatedEvent.InputTuple,
      LeaderboardUpdatedEvent.OutputTuple,
      LeaderboardUpdatedEvent.OutputObject
    >;

    "UserSignedUp(address)": TypedContractEvent<
      UserSignedUpEvent.InputTuple,
      UserSignedUpEvent.OutputTuple,
      UserSignedUpEvent.OutputObject
    >;
    UserSignedUp: TypedContractEvent<
      UserSignedUpEvent.InputTuple,
      UserSignedUpEvent.OutputTuple,
      UserSignedUpEvent.OutputObject
    >;
  };
}
