/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminResetGame"
      | "completeGame"
      | "gameStartTime"
      | "gameType"
      | "getGameDetails"
      | "initializeGame"
      | "isGameReady"
      | "joinGame"
      | "player1"
      | "player1Completed"
      | "player1Joined"
      | "player2"
      | "player2Completed"
      | "player2Joined"
      | "roomNumber"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "GameCompleted" | "GameInitialized" | "PlayerJoined"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adminResetGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gameStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGameDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeGame",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGameReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "player1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "player1Completed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "player1Joined",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "player2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "player2Completed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "player2Joined",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roomNumber",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "adminResetGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGameReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "player1Completed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "player1Joined",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "player2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "player2Completed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "player2Joined",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roomNumber", data: BytesLike): Result;
}

export namespace GameCompletedEvent {
  export type InputTuple = [roomNumber: BigNumberish, winner: AddressLike];
  export type OutputTuple = [roomNumber: bigint, winner: string];
  export interface OutputObject {
    roomNumber: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameInitializedEvent {
  export type InputTuple = [
    roomNumber: BigNumberish,
    creator: AddressLike,
    gameType: BigNumberish
  ];
  export type OutputTuple = [
    roomNumber: bigint,
    creator: string,
    gameType: bigint
  ];
  export interface OutputObject {
    roomNumber: bigint;
    creator: string;
    gameType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlayerJoinedEvent {
  export type InputTuple = [roomNumber: BigNumberish, player: AddressLike];
  export type OutputTuple = [roomNumber: bigint, player: string];
  export interface OutputObject {
    roomNumber: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Game extends BaseContract {
  connect(runner?: ContractRunner | null): Game;
  waitForDeployment(): Promise<this>;

  interface: GameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminResetGame: TypedContractMethod<[], [void], "nonpayable">;

  completeGame: TypedContractMethod<[user: AddressLike], [void], "nonpayable">;

  gameStartTime: TypedContractMethod<[], [bigint], "view">;

  gameType: TypedContractMethod<[], [bigint], "view">;

  getGameDetails: TypedContractMethod<
    [_roomNumber: BigNumberish],
    [
      [string, bigint, bigint] & {
        winner: string;
        timeTaken: bigint;
        gameTypeResult: bigint;
      }
    ],
    "view"
  >;

  initializeGame: TypedContractMethod<
    [creator: AddressLike, _gameType: BigNumberish, _roomNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  isGameReady: TypedContractMethod<[], [boolean], "view">;

  joinGame: TypedContractMethod<[player: AddressLike], [void], "nonpayable">;

  player1: TypedContractMethod<[], [string], "view">;

  player1Completed: TypedContractMethod<[], [boolean], "view">;

  player1Joined: TypedContractMethod<[], [boolean], "view">;

  player2: TypedContractMethod<[], [string], "view">;

  player2Completed: TypedContractMethod<[], [boolean], "view">;

  player2Joined: TypedContractMethod<[], [boolean], "view">;

  roomNumber: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminResetGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeGame"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gameStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGameDetails"
  ): TypedContractMethod<
    [_roomNumber: BigNumberish],
    [
      [string, bigint, bigint] & {
        winner: string;
        timeTaken: bigint;
        gameTypeResult: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeGame"
  ): TypedContractMethod<
    [creator: AddressLike, _gameType: BigNumberish, _roomNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isGameReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<[player: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "player1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "player1Completed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "player1Joined"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "player2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "player2Completed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "player2Joined"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "roomNumber"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "GameCompleted"
  ): TypedContractEvent<
    GameCompletedEvent.InputTuple,
    GameCompletedEvent.OutputTuple,
    GameCompletedEvent.OutputObject
  >;
  getEvent(
    key: "GameInitialized"
  ): TypedContractEvent<
    GameInitializedEvent.InputTuple,
    GameInitializedEvent.OutputTuple,
    GameInitializedEvent.OutputObject
  >;
  getEvent(
    key: "PlayerJoined"
  ): TypedContractEvent<
    PlayerJoinedEvent.InputTuple,
    PlayerJoinedEvent.OutputTuple,
    PlayerJoinedEvent.OutputObject
  >;

  filters: {
    "GameCompleted(uint256,address)": TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;
    GameCompleted: TypedContractEvent<
      GameCompletedEvent.InputTuple,
      GameCompletedEvent.OutputTuple,
      GameCompletedEvent.OutputObject
    >;

    "GameInitialized(uint256,address,uint8)": TypedContractEvent<
      GameInitializedEvent.InputTuple,
      GameInitializedEvent.OutputTuple,
      GameInitializedEvent.OutputObject
    >;
    GameInitialized: TypedContractEvent<
      GameInitializedEvent.InputTuple,
      GameInitializedEvent.OutputTuple,
      GameInitializedEvent.OutputObject
    >;

    "PlayerJoined(uint256,address)": TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
    PlayerJoined: TypedContractEvent<
      PlayerJoinedEvent.InputTuple,
      PlayerJoinedEvent.OutputTuple,
      PlayerJoinedEvent.OutputObject
    >;
  };
}
